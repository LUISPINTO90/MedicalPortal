// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”¥ RELACIONES CON DATOS DEL USUARIO
  patients      Patient[]     // Un usuario tiene muchos pacientes
  appointments  Appointment[] // Un usuario tiene muchas citas
  treatments    Treatment[]   // Un usuario tiene muchos tratamientos

  @@map("users")
}

model Patient {
  id             Int      @id @default(autoincrement())
  nombre         String
  apellidos      String
  edad           Int
  curp           String   @unique
  telefono       String
  direccion      String
  email          String?
  tipoSangre     String
  sexo           String
  observaciones  String?
  pdfPath        String?  // Mantener por compatibilidad (opcional)
  pdfData        String?  // PDF en base64
  pdfName        String?  // Nombre original del archivo
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // ðŸ”¥ RELACIÃ“N CON USUARIO
  userId         Int
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relaciones existentes
  citas          Appointment[]
  tratamientos   Treatment[]

  @@map("patients")
}

model Appointment {
  id          Int      @id @default(autoincrement())
  fecha       DateTime
  hora        String   // HH:MM format
  motivo      String
  notas       String?
  estatus     AppointmentStatus @default(PENDIENTE)
  patientId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ðŸ”¥ RELACIÃ“N CON USUARIO
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // RelaciÃ³n con paciente
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Treatment {
  id            Int      @id @default(autoincrement())
  nombre        String
  descripcion   String
  fechaInicio   DateTime
  duracion      String   // "30 dÃ­as", "2 semanas", etc.
  observaciones String?
  activo        Boolean  @default(true)
  patientId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // ðŸ”¥ RELACIÃ“N CON USUARIO
  userId        Int
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // RelaciÃ³n con paciente
  patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("treatments")
}

enum AppointmentStatus {
  PENDIENTE
  REALIZADA
  CANCELADA
}